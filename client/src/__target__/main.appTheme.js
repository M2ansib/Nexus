// Transcrypt'ed from Python, 2021-05-07 22:02:45
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
import {Box, TextField, styled} from './common.pymui.js';
import {colors, createMuiTheme} from './common.pymui.js';
import {createElement} from './common.pyreact.js';
var __name__ = 'main.appTheme';
export var theme = createMuiTheme (dict ({'overrides': dict ({'MuiDivider': dict ({'root': dict ({'margin': '0.8rem'})}), 'MuiTextField': dict ({'root': dict ({'marginRight': '0.5rem'})})}), 'palette': dict ({'primary': colors ['teal'], 'secondary': colors ['pink'], 'altPrimary': dict ({'main': colors ['cyan'] [700], 'contrastText': colors ['common'] ['white']}), 'altSecondary': dict ({'main': colors ['cyan'] [400], 'contrastText': colors ['common'] ['white']}), 'warning': colors ['yellow'], 'error': colors ['red']}), 'props': dict ({'MuiButton': dict ({'variant': 'contained', 'color': 'primary', 'style': dict ({'minWidth': '6rem', 'margin': '0.3rem'})}), 'MuiTextField': dict ({'variant': 'outlined', 'type': 'text', 'fullWidth': true, 'InputLabelProps': dict ({'shrink': true}), 'InputProps': dict ({'margin': 'dense'}), 'margin': 'dense'}), 'MuiPaper': dict ({'elevation': 2}), 'MuiTable': dict ({'stickyHeader': true, 'size': 'small'}), 'MuiTableCell': dict ({'size': 'small'})})}));
export var ROTextField = function (props) {
	var new_props = dict ({'type': 'text', 'fullWidth': true, 'disabled': true});
	new_props.py_update (props);
	return createElement (TextField, new_props);
};
export var Flexbox = styled (Box) (dict ({'display': 'flex'}));
export var FlexboxCenter = styled (Box) (dict ({'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center'}));
export var modalStyles = dict ({'overlay': dict ({'zIndex': 1000}), 'content': dict ({'top': '35%', 'left': '50%', 'right': 'auto', 'bottom': 'auto', 'marginRight': '-50%', 'transform': 'translate(-50%, -50%)'})});

//# sourceMappingURL=main.appTheme.map